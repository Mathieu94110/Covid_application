{"version":3,"sources":["App.module.css","countryPicker/countryPicker.module.css","images/covid19.jpg","Cards/Cards.js","api/index.js","Charts/Charts.js","countryPicker/countryPicker.js","WorldMap/WorldMap.js","App.js","serviceWorker.js","index.js","WorldMap/WorldMap.module.css","Cards/Cards.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","Grid","container","spacing","justify","item","component","Card","xs","md","className","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","death","date","reportDate","console","log","fetchCountries","countries","name","fetchCountriesDataLocation","Charts","useState","setFetchData","useEffect","initialDailyData","fetchApi","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","countriesData","setCountriesData","picker","FormControl","NativeSelect","defaultValue","onChange","e","target","select","key","WorldMap","props","state","showPopup","info","response","that","this","setState","Map","layers","TileLayer","source","OSM","view","View","center","fromLonLat","zoom","lat","countryInfo","long","cases","population","marker","Feature","geometry","Circle","Math","sqrt","vectorSource","VectorSource","features","markerVectorLayer","VectorLayer","addLayer","on","forEachFeatureAtPixel","pixel","feature","values_","style_map","height","container_two","popup","popup_country_population","popup_case","popup_country_deaths","id","style","Component","App","fetchedData","image","src","images","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f03b37b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1cfFK\",\"image\":\"App_image__pxuEz\",\"App-logo\":\"App_App-logo__1k3WI\",\"App-logo-spin\":\"App_App-logo-spin__khfv8\",\"App-header\":\"App_App-header__2S1rE\",\"App-link\":\"App_App-link__Vp975\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"picker\":\"countryPicker_picker__BiDE2\",\"select\":\"countryPicker_select__3w-47\"};","module.exports = __webpack_public_path__ + \"static/media/covid19.dc51f0b3.jpg\";","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport cx from \"classnames\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (confirmed) {\r\n    return (\r\n      <div>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.infected)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Contaminés\r\n              </Typography>\r\n              <Typography variant=\"h5\"></Typography>\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n\r\n              <Typography variant=\"body2\">\r\n                Nombre d'individus ayant été contaminés par le COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.recovered)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Soignés\r\n              </Typography>\r\n              <Typography variant=\"h5\"></Typography>\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Nombre d'individus ayant été soignés du COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, styles.deaths)}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Décédés\r\n              </Typography>\r\n              <Typography variant=\"h5\"></Typography>\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Nombre d'individus décédés du COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  } else {\r\n    return \"Chargment en cours ...\";\r\n  }\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nlet url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      death: dailyData.deaths.total,\r\n\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountriesDataLocation = async () => {\r\n  try {\r\n    const { data } = await axios.get(\"https://corona.lmao.ninja/v2/countries\");\r\n    console.log(\"API DATA\", data);\r\n    return data;\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Charts.module.css\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../api\";\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [fetchData, setFetchData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n      console.log(initialDailyData);\r\n      setFetchData(initialDailyData);\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  const lineChart = fetchData[0] ? (\r\n    <Line\r\n      data={{\r\n        labels: fetchData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: fetchData.map((data) => data.confirmed),\r\n            label: \"Contaminés\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n\r\n          {\r\n            data: fetchData.map((data) => data.death),\r\n            label: \"Décédés\",\r\n            borderColor: \"#ff5733\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Contaminés\", \"Soignés\", \"Décédés\"],\r\n        datasets: [\r\n          {\r\n            label: \"Individus\",\r\n            backgroundColor: [\"purple\", \"green\", \"#ff5733\"],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: {\r\n          display: false,\r\n        },\r\n        title: { display: true, text: `Situation en ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    // on aaffiche le resultat\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../api\";\r\nimport styles from \"./countryPicker.module.css\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countriesData, setCountriesData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setCountriesData(await fetchCountries());\r\n    };\r\n    fetchApi();\r\n  }, [setCountriesData]);\r\n\r\n  return (\r\n    <div className={styles.picker}>\r\n      <FormControl>\r\n        <NativeSelect\r\n          defaultValue=\"\"\r\n          onChange={(e) => handleCountryChange(e.target.value)}\r\n          className={styles.select}\r\n        >\r\n          <option value=\"\">Dans le monde</option>\r\n          {countriesData.map((country) => (\r\n            <option key={country}>{country}</option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./WorldMap.module.css\";\r\nimport { fetchCountriesDataLocation } from \"../api\";\r\nimport \"ol/ol.css\";\r\nimport { Map, View } from \"ol\";\r\nimport { fromLonLat } from \"ol/proj.js\";\r\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\r\nimport { Vector as VectorSource, OSM } from \"ol/source\";\r\nimport Feature from \"ol/Feature\";\r\nimport Circle from \"ol/geom/Circle\";\r\n\r\nexport default class WorldMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fetchData: [],\r\n      showPopup: false,\r\n      info: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let response = await fetchCountriesDataLocation();\r\n    let that = this;\r\n    this.setState({ fetchData: response }, () => {\r\n      const map = new Map({\r\n        target: \"map\",\r\n        layers: [\r\n          new TileLayer({\r\n            source: new OSM(),\r\n          }),\r\n        ],\r\n\r\n        view: new View({\r\n          center: fromLonLat([0, 30]),\r\n          zoom: 0,\r\n        }),\r\n      });\r\n      let gpsarrays = this.state.fetchData.map((data) => ({\r\n        lat: data.countryInfo.lat,\r\n        long: data.countryInfo.long,\r\n        deaths: data.deaths,\r\n        country: data.country,\r\n        cases: data.cases,\r\n        population: data.population,\r\n      }));\r\n\r\n      gpsarrays.map((data) => {\r\n        const marker = new Feature({\r\n          geometry: new Circle(\r\n            fromLonLat([data.long, data.lat]),\r\n            Math.sqrt(10000000 * data.deaths)\r\n          ),\r\n\r\n          info: data,\r\n        });\r\n\r\n        const vectorSource = new VectorSource({\r\n          features: [marker],\r\n        });\r\n\r\n        const markerVectorLayer = new VectorLayer({\r\n          source: vectorSource,\r\n        });\r\n        map.addLayer(markerVectorLayer);\r\n      });\r\n\r\n      map.on(\"click\", function (e) {\r\n        map.forEachFeatureAtPixel(e.pixel, function (feature) {\r\n          //do something\r\n          that.setState({ showPopup: true, info: feature.values_.info });\r\n          console.log(e);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // carte + vue centrée sur l'ile-de-france\r\n\r\n    const style_map = {\r\n      height: \"400px\",\r\n    };\r\n\r\n    if (!this.state.showPopup) {\r\n      return (\r\n        <div className={styles.container}>\r\n          <div className={styles.popup}>\r\n            <h2>Cliquez sur un des cercles pour plus d'informations !</h2>\r\n            <div id=\"map\" style={style_map}></div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={styles.container_two}>\r\n          <div>\r\n            <div className={styles.popup}>\r\n              <h2>{this.state.info.country}</h2>\r\n              <h3 className={styles.popup_country_population}>\r\n                Population : {this.state.info.population}\r\n              </h3>\r\n              <h3 className={styles.popup_case}>\r\n                Nombre de cas recensés : {this.state.info.cases}\r\n              </h3>\r\n              <h3 className={styles.popup_country_deaths}>\r\n                Nombre de morts recensés : {this.state.info.deaths}\r\n              </h3>\r\n            </div>\r\n\r\n            <div id=\"map\" style={style_map}></div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport Cards from \"./Cards/Cards\";\nimport { fetchData } from \"./api\";\nimport Charts from \"./Charts/Charts\";\nimport CountryPicker from \"./countryPicker/countryPicker\";\nimport WorldMap from \"./WorldMap/WorldMap\";\nimport images from \"./images/covid19.jpg\";\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({\n      data: fetchedData,\n    });\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data: fetchedData,\n      country: country,\n    });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.App}>\n        <img className={styles.image} src={images} alt=\"COVID-19\" />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country} />\n        <WorldMap />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WorldMap_container__hXyzi\",\"container_two\":\"WorldMap_container_two__1Mrue\",\"popup\":\"WorldMap_popup__3klLy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infected\":\"Cards_infected__1teR-\",\"recovered\":\"Cards_recovered__2VVYR\",\"deaths\":\"Cards_deaths__163yr\"};"],"sourceRoot":""}